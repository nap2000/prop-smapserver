       
    ProxyPass         /webForm ajp://localhost:8009/surveyMobileAPI/webForm
    ProxyPassReverse  /webForm ajp://localhost:8009/surveyMobileAPI/webForm
    ProxyPass         /app/myWork/webForm ajp://localhost:8009/surveyMobileAPI/webForm
    ProxyPassReverse  /app/myWork/webForm ajp://localhost:8009/surveyMobileAPI/webForm
    
    ProxyPass         /formList ajp://localhost:8009/surveyMobileAPI/formList
    ProxyPassReverse  /formList ajp://localhost:8009/surveyMobileAPI/formList
    ProxyPass         /formXML ajp://localhost:8009/surveyMobileAPI/formXML
    ProxyPassReverse  /formXML ajp://localhost:8009/surveyMobileAPI/formXML
    ProxyPass         /instanceXML ajp://localhost:8009/surveyMobileAPI/instanceXML
    ProxyPassReverse  /instanceXML ajp://localhost:8009/surveyMobileAPI/instanceXML
    ProxyPass         /submission ajp://localhost:8009/surveyMobileAPI/submission connectiontimeout=60 timeout=600
    ProxyPassReverse  /submission ajp://localhost:8009/surveyMobileAPI/submission
    ProxyPass         /xformsManifest ajp://localhost:8009/surveyMobileAPI/xformsManifest
    ProxyPassReverse  /xformsManifest ajp://localhost:8009/surveyMobileAPI/xformsManifest
    ProxyPass         /htmlManifest ajp://localhost:8009/surveyMobileAPI/htmlManifest
    ProxyPassReverse  /htmlManifest ajp://localhost:8009/surveyMobileAPI/htmlManifest
    ProxyPass         /action ajp://localhost:8009/surveyMobileAPI/action
    ProxyPassReverse  /action ajp://localhost:8009/surveyMobileAPI/action
    ProxyPass         /lookup ajp://localhost:8009/surveyMobileAPI/lookup
    ProxyPassReverse  /lookup ajp://localhost:8009/surveyMobileAPI/lookup
    ProxyPass         /login ajp://localhost:8009/surveyMobileAPI/login
    ProxyPassReverse  /login ajp://localhost:8009/surveyMobileAPI/login
    
    # Set a timeout of 10 minutes on media upload requests
    ProxyPass         /surveyKPI/upload/media ajp://localhost:8009/surveyKPI/rest/upload/media timeout=600
    ProxyPassReverse  /surveyKPI/upload/media ajp://localhost:8009/surveyKPI/rest/upload/media
    ProxyPass         /surveyKPI/assignments/load ajp://localhost:8009/surveyKPI/rest/assignments/load timeout=600
    ProxyPassReverse  /surveyKPI/assignments/load ajp://localhost:8009/surveyKPI/rest/assignments/load

    ProxyPass         /surveyKPI/monitoring ajp://localhost:8009/surveyKPI/monitoring
    ProxyPassReverse  /surveyKPI/monitoring ajp://localhost:8009/surveyKPI/monitoring   
    ProxyPass         /monitoring ajp://localhost:8009/surveyMobileAPI/monitoring
    ProxyPassReverse  /monitoring ajp://localhost:8009/surveyMobileAPI/monitoring
    ProxyPass         /api/monitoring ajp://localhost:8009/koboToolboxApi/monitoring
    ProxyPassReverse  /api/monitoring ajp://localhost:8009/koboToolboxApi/monitoring   
    
    ProxyPass         /surveyKPI ajp://localhost:8009/surveyKPI/rest
    ProxyPassReverse  /surveyKPI ajp://localhost:8009/surveyKPI/rest

    ProxyPass         /api ajp://localhost:8009/koboToolboxApi/api
    ProxyPassReverse  /api ajp://localhost:8009/koboToolboxApi/api


    # Add CORS
    Header add Access-Control-Allow-Origin "http://localhost:8100"
    Header add Access-Control-Allow-Credentials true
    Header add Access-Control-Allow-Headers "Authorization, Content-Type, form_status"
    
    <Directory />
    	Require all denied
    </Directory>

    <Directory /var/www/smap>
    	Options FollowSymLinks
        AllowOverride None
        Require all granted
    </Directory>
	
	# Access control for a temporary user
    <Location /formXML/id>
        Require all granted
    </Location>

    <Directory /logout.html>
        AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        Require valid-user
    </Directory>
    
    <Directory /login>
        AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        Require valid-user
    </Directory>


	# field manager client module
	<Location /fieldManager>
        AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        Require valid-user
	</Location>
	
	# dashboard module
	<Location /dashboard>
        AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        Require valid-user
	</Location>
	    	
	# survey mobile API module. Require enumerator access
     <Location /formList>
     	AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        Require valid-user
     </Location>

     <Location /webForm>
        AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        <LimitExcept OPTIONS>
        	Require valid-user
        </LimitExcept>
    </Location>
    
    <Location /app/myWork/webForm>
        AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        <LimitExcept OPTIONS>
        	Require valid-user
        </LimitExcept>
    </Location>
    
    # Access controlled by a key
    <Location /webForm/key>
      	Require all granted 
    </Location>
    
    <Location /app/myWork/webForm/key>
      	Require all granted 
    </Location>
    
    # Access controlled by a temporary user id
    <Location /webForm/id>
      	Require all granted 
    </Location>
    
    <Location /app/myWork/webForm/id>
      	Require all granted 
    </Location>
    
    # A webform action
    <Location /webForm/action>
      	Require all granted 
    </Location>
    
    <Location /app/myWork/webForm/action>
      	Require all granted 
    </Location>
    
	# Allow access to banner logo without a password
	<Location /media/organisation/*/settings/bannerLogo>
        Require all granted
    </Location>

    <Location /formXML>
     	AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
       	Require valid-user
	</Location>
	
	# Access control for a temporary user
    <Location /formXML/id>
        Require all granted
    </Location>
    
	<Location /submission>
    	AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        <LimitExcept OPTIONS>
        	Require valid-user
        </LimitExcept>
	</Location>

# results submitted with an authentication key
	<Location /submission/key>
		Require all granted
    </Location>
    
	<Location /instanceXML>
        AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        Require valid-user
	</Location>
	
	<Location /lookup>
        AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        Require valid-user
	</Location>
	
	<Location /login>
        AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        Require valid-user
	</Location>

	<Location /xformsManifest>
		AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        <LimitExcept OPTIONS>
        	Require valid-user
        </LimitExcept>
    </Location>
	
	<Location /htmlManifest>
#		Header unset ETag
#		Header set Cache-Control "max-age=0, no-cache, no-store, must-revalidate"
#		Header set Pragma "no-cache"
#		Header set Expires "Sat, 1 Jan 2000 01:00:00 GMT"
		AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        Require valid-user
	</Location>

	# surveyKPI module
	<Location /surveyKPI>
		AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        <LimitExcept OPTIONS>
        	Require valid-user
        </LimitExcept>
	</Location>

    <Location /api>
        AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        	AuthBasicProvider dbd
        	AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        <LimitExcept OPTIONS>
            Require valid-user
         </LimitExcept>
         
        FileETag None
        Header unset ETag
        Header set Cache-Control "max-age=0, no-cache, no-store, must-revalidate"
        Header set Pragma "no-cache"
        Header set Expires "Wed, 11 Jan 1984 05:00:00 GMT"
         
    </Location>

    # Session based api
    <Location /api/v1/session>
         
        Require all granted

        FileETag None
        Header unset ETag
        Header set Cache-Control "max-age=0, no-cache, no-store, must-revalidate"
        Header set Pragma "no-cache"
        Header set Expires "Wed, 11 Jan 1984 05:00:00 GMT"
         
    </Location>


	# Access with an authentication key
    <Location /surveyKPI/user/details/key>
        Require all granted
    </Location>
    
    <Location /surveyKPI/log/key>
        Require all granted
    </Location>
    
    <Location /surveyKPI/myassignments/key>
    	Require all granted
    </Location>

    <Location /surveyKPI/reports/view>
        Require all granted
    </Location>
    
    <Location /authenticate>
		AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        <LimitExcept OPTIONS>
        	Require valid-user
        </LimitExcept>
    </Location>
    
    <Location /surveyKPI/action>
        Require all granted
        
        FileETag None
        Header unset ETag
        Header set Cache-Control "max-age=0, no-cache, no-store, must-revalidate"
        Header set Pragma "no-cache"
        Header set Expires "Wed, 11 Jan 1984 05:00:00 GMT"
    </Location>

	# Request password reset
	<Location /surveyKPI/onetimelogon>
		Require all granted
	</Location>

	# Request registration
	<Location /surveyKPI/register>
		Require all granted
	</Location>
	
	# Subscribe - unsubscribe
	<Location /surveyKPI/subscriptions>
		Require all granted
	</Location>

	<Location /surveyKPI/reports/oembed.json>
		Require all granted
	</Location>
	
	<Location /surveyKPI/file/id>
		Require all granted
	</Location>

	# Deny access to deprecated services
	<Location /surveyKPI/deprecated>
		Require all denied
	</Location>
	
	# Miscelaneous
	<Location /OpenLayers>
		Require all granted
	</location>
	<Location /fieldManager/js>
		Require all granted
    </location>
	
	alias /attachments /smap/attachments
	<Directory /smap/attachments>
		Require all granted
	</Directory>
        
	# Media files
	alias /media /smap/media
	<Directory /smap/media>
		Options FollowSymLinks
        AuthType Basic
        AuthName "smap"
        AuthBasicUseDigestAlgorithm MD5
        AuthBasicProvider dbd
        AuthDBDUserRealmQuery "select password from users where ident = %s and realm = %s"
        Require valid-user
	</Directory>
	
	# Custom CSS
	alias /custom/css /smap/css
    <Directory /smap/css>
        Require all granted
    </Directory>



